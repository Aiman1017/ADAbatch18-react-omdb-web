{"version":3,"sources":["components/Header.js","components/Search.js","components/Movie.js","components/Main.js","components/Detail.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","props","state","value","handleChange","bind","handleClick","event","this","setState","target","preventDefault","type","placeholder","onChange","onClick","React","Component","Movie","movies","map","val","to","imdbID","key","src","Poster","width","Title","Year","Main","getSearch","searchTerm","console","log","url","fetch","then","response","json","data","Detail","movie","imdbId","match","params","infoUrl","history","goBack","Runtime","genre","Metascore","imdbRating","Director","Writer","Actors","Plot","withRouter","Footer","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d347e94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className={'bg-dark text-light text-center py-3'}>\r\n            <header>OMDB Web Cycle</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Search extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {value: ''}\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleClick(event){\r\n        event.preventDefault();\r\n        this.props.handleClick(this.state.value);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={'text-center py-3'}>\r\n                <form>\r\n                    <input type='text' placeholder='Enter movie name here' value={this.state.value} onChange={this.handleChange}/>\r\n                    <button onClick={this.handleClick}>Search</button>\r\n                </form> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Movie(props) {\r\n    return(\r\n        <div>\r\n            <ul>\r\n                {\r\n                    props.movies.map(val => {\r\n                        return <Link to={`/detail/${val.imdbID}`}>\r\n                            <div key={val.imdbID} className={'card'}>\r\n                                \r\n                                <div className={'card-body'}>\r\n                                    <div className={'row'}>\r\n                                        <div className={'col-3'}>\r\n                                        <img src={val.Poster} width={150}></img>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className={'col-9'}>\r\n                                        <h4>{val.Title}</h4>\r\n                                        <p>{val.Year}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Movie;","import React from 'react';\r\nimport Search from './Search';\r\nimport Movie from './Movie';\r\n\r\n//Pass data from son to parent -Lifting up data\r\nclass Main extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {movies: []}\r\n        this.getSearch = this.getSearch.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <main>\r\n                <Search handleClick={this.getSearch}/>\r\n                <Movie movies = {this.state.movies} />\r\n            </main>\r\n        )\r\n    }\r\n\r\n    // getId(imdbID){\r\n    //     console.log(imdbID)\r\n    // }\r\n\r\n    getSearch(searchTerm){\r\n        console.log(searchTerm)\r\n        let url = `http://www.omdbapi.com/?s=${searchTerm}&apikey=87d10179`\r\n        fetch(url).then(response => response.json()).then(data => {\r\n            this.setState({\r\n                movies: data['Search']\r\n            })\r\n            console.log(this.state.movies)\r\n        })\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport {withRouter} from 'react-router';\r\n\r\nclass Detail extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {movie: null}\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        let imdbId = this.props.match.params.imdbId;\r\n        let infoUrl = `http://www.omdbapi.com/?i=${imdbId}&apikey=87d10179`\r\n        fetch(infoUrl).then(response => response.json()).then(data => {\r\n            console.log(data)\r\n            this.setState({\r\n                movie: data\r\n            });\r\n        });\r\n    }\r\n\r\n    handleClick(){\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <main>\r\n\r\n            <button onClick={this.handleClick} className={'btn btn-primary'}>Go Back</button>\r\n\r\n            <div className={'text-center'}>\r\n                {\r\n                this.state.movie ? \r\n                <div>\r\n                    <img src={this.state.movie.Poster}></img>\r\n                    <h2>{this.state.movie.Title}</h2>\r\n                    <p>{this.state.movie.Year}</p>\r\n                    <p>{this.state.movie.Runtime}</p>\r\n                    <p>{this.state.movie.genre}</p>\r\n                    <br/>\r\n\r\n                    <h4>Metascore: {this.state.movie.Metascore}</h4>\r\n                    <h4>IMDB Rating: {this.state.movie.imdbRating}</h4>\r\n                    <br/>\r\n\r\n                    <p>{this.state.movie.Director}</p>\r\n                    <p>{this.state.movie.Writer}</p>\r\n                    <p>{this.state.movie.Actors}</p>\r\n                    <br/>\r\n\r\n                    <h5>{this.state.movie.Plot}</h5>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h3>The Page Is Loading!!</h3>\r\n                </div>\r\n                \r\n            }\r\n            </div>\r\n        </main>\r\n    );\r\n    }\r\n}\r\n\r\nexport default withRouter(Detail);","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <div className={'bg-dark text-light text-center py-4 mt-5'}>\r\n                <p>Copyright &copy; Aiman 2020</p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Detail from './components/Detail';\nimport Footer from './components/Footer';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header/>\n          <Switch>\n            <Route path=\"/detail/:imdbId\">\n              <Detail/>\n            </Route>\n\n            <Route path=\"/\">\n              <Main/>\n            </Route>\n          </Switch>\n        <Footer/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}